(require list)
(require table)
(require text)

(let (
  math (require math)
  operatorprecedence (tbnew)
  digits (tbnew)
  evaluate ()
  ) (
  (tbsval operatorprecedence + 1)
  (tbsval operatorprecedence - 1)
  (tbsval operatorprecedence * 2)
  (tbsval operatorprecedence / 2)
  (tbsval operatorprecedence ^ 3)
  (tbsval operatorprecedence 'flushstack 0)
  
  (setq evaluate (lambda (expr) (
    (let (
      operatorstack ()
      operandstack ()
      handleoperand ()
      handleisolation ()
      handleoperator ()
      ) (
      (setq handleoperand (lambda (token) (
        (setq operandstack (lspush operandstack token))
        )))
      (setq handleisolation (lambda (token) (
        (handleoperand (evaluate token))
        )))
      (setq handleoperator (lambda (token) (
        (let (
          tokenprecedence (tbgval operatorprecedence token)
          topoper (if (= (lslen operatorstack) 0) () (lslast operatorstack))
          topoperprecedence (if (= topoper ()) 0 (tbgval operatorprecedence topoper))
          ) (
          (if (< tokenprecedence topoperprecedence) (
            (if (< (lslen operandstack) 2)
              (return-from evaluate ())
              (let (
                leftoperand ()
                rightoperand ()
                ) (
                (setq operatorstack (lspop operatorstack))
                (setq rightoperand (lslast operandstack))
                (setq operandstack (lspop operandstack))
                (setq leftoperand (lslast operandstack))
                (setq operandstack (lspop operandstack))
                (setq operandstack (lspush operandstack (topoper leftoperand rightoperand)))
                (runitback token)
                ))
              )
            ) (
            (setq operatorstack (lspush operatorstack token))
            ))
          ))
        )))
      (lsiter expr (lambda (token) (
        (let (
          tokentype (typestr token)
          ) (
          (if (= tokentype (typestr 0))
            (handleoperand token)
            (if (= tokentype (typestr ()))
              (handleisolation token)
              (if (or (= tokentype (typestr +)) (= tokentype (typestr ^)))
                (handleoperator token)
                (return-from evaluate ())
                )
              )
            )
          ))
        )))
      (if (> (lslen operatorstack) 0)
        (handleoperator 'flushstack)
        ()
        )
      (if (= (lslen operandstack) 1)
        (lslast operandstack)
        ()
        )
      ))
    )))
  (define infix (macro (expr) (
    (annotation "Evaluates a mathematical infix-notation expression respecting the order of operations")
    (returnparam ("number") () "The result of the expression")
    (argument expr ("list") () "A list containing the mathematical infix-notation expression")
    ) (
    (evaluate expr)
    )))
  (values)
  ))
